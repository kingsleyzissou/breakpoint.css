/* List of columns in word and number.
 * These numbers will be looped through in  the mixins to create the class name and 
 * the magnitude of columns the column will span.
 */
$divisions: ('one' 1, 'two' 2 , 'three' 3, 'four' 4, 'five' 5, 'six' 6, 'seven' 7, 'eight' 8, 'nine' 9, 'ten' 10, 'eleven' 11, 'twelve' 12);

/* 12 column grid - default gutter 1em */
.grid {
    display: grid;
    grid-template-columns: repeat(12, [col] 1fr);
    grid-auto-rows: minmax(50px, auto);
    grid-gap: 1em;
}

/* No gutter helper class */
.gutter-none {
    grid-gap: 0;
}

/* 1em gutter helper class */
.gutter-one {
    grid-gap: 1em;
}

/* 2em gutter helper class */
.gutter-two {
    grid-gap: 2em;
}

/* Dynamic grid */
.autofit {
    grid-template-columns: repeat(auto-fit, [col] minmax(300px, 1fr));
}

/* This will be redundant if we create a .flex utility class */
.column {
    display: flex;
    justify-content: center;
    align-items: center; 
}

/**
 * Mixin to create mobile/standard 12 grid columns.
 *
 * @param $prefix - The prefix, i.e 'desktop-' for desktop grid
 * @param $columns - The list of cardinal numbers in words and number i.e. 'one' 1
 * 1. Loop through all the columns
 * 2. Set the starting point as auto. This allows
 *    columns to stack.
 * 3. Set the column to span the desired amount of colums i.e. span 2 columns for .two
 */
@mixin column-divisions($prefix, $columns) {
    @each $i in $columns { /* 1 */
        .#{$prefix}#{nth($i, 1)} {
            grid-column-start: auto; /* 2 */
            grid-column-end: span nth($i, 2); /* 3 */
        }
    }
}

/**
 * Mixin to create mobile/standard 12 grid columns.
 *
 * @param $prefix - The prefix, i.e 'desktop-' for desktop grid
 * @param $columns - The list of cardinal numbers in words and number i.e. 'one' 1
 * 1. Set the starting point as to the desired offset. 
 *    i.e. offset-two will set the offset to the second
 *    column
 */
@mixin offset($prefix, $columns) {
    @each $i in $columns {
        .#{$prefix}#{'offset-'}#{nth($i, 1)} {
            grid-column-start: nth($i, 2);
        }
    }
}

/* Mobile screens */
@include column-divisions('', $divisions);
@include offset('', $divisions);

/* Tablet screens */
@media screen and (min-width: 700px) and (max-width: 1000px) {
    @include column-divisions('tablet-', $divisions);
    @include offset('tablet-', $divisions);
}

/* Desktop screens */
@media screen and (min-width: 1000px) {
    @include column-divisions('desktop-', $divisions);
    @include offset('desktop-', $divisions);
}

