/* @TODO move to variables/settings file */
$divisions: 'one' 1, 'two' 2 , 'three' 3, 'four' 4, 'five' 5, 'six' 6, 'seven' 7, 'eight' 8, 'nine' 9, 'ten' 10, 'eleven' 11, 'twelve' 12;

/* 12 column grid */
.grid {
    display: grid;
    grid-template-columns: repeat(12, [col] 1fr);
    grid-auto-rows: minmax(50px, auto);
    grid-gap: 1em;
}

/* Dynamic grid */
.autofit {
    grid-template-columns: repeat(auto-fit, [col] minmax(300px, 1fr));
}

/* This will be redundant if we create a .flex utility class */
.column {
    display: flex;
    justify-content: center;
    align-items: center; 
}

/* @TODO Move to mixin file
 * Mixin to create all of the column divisions
 */
@mixin column-divisions($prefix, $columns) {
    @each $i in $columns {
        .#{$prefix}#{nth($i, 1)} {
            grid-column-start: auto;
            grid-column-end: span nth($i, 2);
            // @include offset($prefix, $columns);
        }
    }
}

/* @TODO Move to mixin file
 * Mixin to create all of the grid offsets
 */
@mixin offset($prefix, $columns) {
    @each $i in $columns {
        .#{$prefix}#{'offset-'}#{nth($i, 1)} {
            grid-column-start: nth($i, 2);
        }
    }
}

/* Mobile screens */
@include column-divisions('', $divisions);
@include offset('', $divisions);

/* Tablet screens */
@media screen and (min-width: 700px) and (max-width: 1000px) {

    @include column-divisions('tablet-', $divisions);
    @include offset('tablet-', $divisions);

}

/* Desktop screens */
@media screen and (min-width: 1000px) {

    @include column-divisions('desktop-', $divisions);
    @include offset('desktop-', $divisions);

}

